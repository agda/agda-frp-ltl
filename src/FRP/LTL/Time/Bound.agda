open import Data.Empty using ( ⊥-elim )
open import Data.Product using ( _×_ )
open import Data.Sum using ( _⊎_ ; inj₁ ; inj₂ )
open import Relation.Binary.PropositionalEquality using ( _≡_ ; _≢_ ; refl ; cong )
open import Relation.Nullary using ( ¬_ )
open import FRP.LTL.Time using ( Time ; _≤_ ; ≤-refl ; _≤-trans_ ; _≤-asym_ ; _≤-total_ ; ≤-proof-irrel )

module FRP.LTL.Time.Bound where

infixr 2 _≼_ _≺_ _⋠_ 
infixr 5 _≼-trans_ _≼-asym_ _≼-total_

-- Time bounds, which extend Time with least and greatest elements

data Time∞ : Set where
  -∞ ∞ : Time∞
  fin : Time → Time∞

-- Order on time, generated by -∞ ≺ s ≺ t ≺ ∞ when s ≤ t
-- A bit of hoop-jumping is done here to get proof irrelevance

data _≼_ : Time∞ → Time∞ → Set where
  ∞≼∞ : (∞ ≼ ∞)
  t≼∞ : ∀ {t} → (fin t ≼ ∞)
  -∞≼∞ : (-∞ ≼ ∞)
  -∞≼t : ∀ {t} → (-∞ ≼ fin t)
  -∞≼-∞ : (-∞ ≼ -∞)
  ≤-impl-≼ : ∀ {t u} → (t ≤ u) → (fin t ≼ fin u)

_⋠_ : Time∞ → Time∞ → Set 
s ⋠ t = ¬(s ≼ t)

_≺_ : Time∞ → Time∞ → Set 
s ≺ t = (s ≼ t) × (t ⋠ s)

-- ≼ is a decidable total order

≼-refl : ∀ {t} → (t ≼ t)
≼-refl { -∞}   = -∞≼-∞
≼-refl {∞}     = ∞≼∞
≼-refl {fin t} = ≤-impl-≼ ≤-refl

_≼-trans_ : ∀ {s t u} → (s ≼ t) → (t ≼ u) → (s ≼ u)
∞≼∞ ≼-trans ∞≼∞ = ∞≼∞
t≼∞ ≼-trans ∞≼∞ = t≼∞
-∞≼∞ ≼-trans ∞≼∞ = -∞≼∞
-∞≼t ≼-trans t≼∞ = -∞≼∞
-∞≼t ≼-trans ≤-impl-≼ t≤u = -∞≼t
-∞≼-∞ ≼-trans -∞≼u = -∞≼u
≤-impl-≼ s≤t ≼-trans t≼∞ = t≼∞
≤-impl-≼ s≤t ≼-trans ≤-impl-≼ t≤u = ≤-impl-≼ (s≤t ≤-trans t≤u)

_≼-asym_ : ∀ {s t} → (s ≼ t) → (t ≼ s) → (s ≡ t)
∞≼∞          ≼-asym ∞≼∞          = refl
-∞≼-∞        ≼-asym -∞≼-∞        = refl
≤-impl-≼ s≤t ≼-asym ≤-impl-≼ t≤s = cong fin (s≤t ≤-asym t≤s)
t≼∞          ≼-asym ()
-∞≼∞         ≼-asym ()
-∞≼t         ≼-asym ()

_≼-total_ : ∀ s t → (s ≼ t) ⊎ (t ≼ s)
∞     ≼-total -∞    = inj₂ -∞≼∞
∞     ≼-total ∞     = inj₁ ∞≼∞
∞     ≼-total fin t = inj₂ t≼∞
-∞    ≼-total ∞     = inj₁ -∞≼∞
fin s ≼-total ∞     = inj₁ t≼∞
-∞    ≼-total -∞    = inj₁ -∞≼-∞
-∞    ≼-total fin t = inj₁ -∞≼t
fin s ≼-total -∞    = inj₂ -∞≼t
fin s ≼-total fin t with s ≤-total t
... | inj₁ s≤t = inj₁ (≤-impl-≼ s≤t)
... | inj₂ t≤s = inj₂ (≤-impl-≼ t≤s)

-- Need to prove proof irrelevance for ≼

≼-proof-irrel : ∀ {t u} → (p q : t ≼ u) → (p ≡ q)
≼-proof-irrel ∞≼∞ ∞≼∞ = refl
≼-proof-irrel t≼∞ t≼∞ = refl
≼-proof-irrel -∞≼∞ -∞≼∞ = refl
≼-proof-irrel -∞≼t -∞≼t = refl
≼-proof-irrel -∞≼-∞ -∞≼-∞ = refl
≼-proof-irrel (≤-impl-≼ t≤₁u) (≤-impl-≼ t≤₂u) = cong ≤-impl-≼ (≤-proof-irrel t≤₁u t≤₂u)
