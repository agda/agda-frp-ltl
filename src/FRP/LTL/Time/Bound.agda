open import Data.Empty using ( ⊥-elim )
open import Data.Product using ( _×_ )
open import Data.Sum using ( _⊎_ ; inj₁ ; inj₂ )
open import Relation.Binary.PropositionalEquality using ( _≡_ ; refl ; cong )
open import Relation.Nullary using ( ¬_ )
open import FRP.LTL.Time using ( Time ; _≤_ ; ≤-refl ; _≤-trans_ ; _≤-asym_ ; _≤-total_ )

module FRP.LTL.Time.Bound where

infixr 2 _≼_ _≺_ _⋠_ 
infixr 5 _≼-trans_ _≼-asym_ _≼-total_

-- Time bounds, which extend Time with least and greatest elements

data Time∞ : Set where
  -∞ ∞ : Time∞
  fin : Time → Time∞

-- Order on time, generated by -∞ ≺ s ≺ t ≺ ∞ when s ≤ t

data _≼_ : Time∞ → Time∞ → Set where
  -∞ : ∀ {t} → (-∞ ≼ t)
  ∞ : ∀ {t} → (t ≼ ∞)
  fin : ∀ {s t} → (s ≤ t) → (fin s ≼ fin t)

_⋠_ : Time∞ → Time∞ → Set 
s ⋠ t = ¬(s ≼ t)

_≺_ : Time∞ → Time∞ → Set 
s ≺ t = (s ≼ t) × (t ⋠ s)

-- ≼ is a total order

≼-refl : ∀ {t} → (t ≼ t)
≼-refl { -∞}   = -∞
≼-refl {∞}     = ∞
≼-refl {fin t} = fin ≤-refl

_≼-trans_ : ∀ {s t u} → (s ≼ t) → (t ≼ u) → (s ≼ u)
-∞      ≼-trans t≼u     = -∞
s≼t     ≼-trans ∞       = ∞
fin s≤t ≼-trans fin t≤u = fin (s≤t ≤-trans t≤u)

_≼-asym_ : ∀ {s t} → (s ≼ t) → (t ≼ s) → (s ≡ t)
-∞      ≼-asym -∞      = refl
∞       ≼-asym ∞       = refl
fin s≤t ≼-asym fin t≤s = cong fin (s≤t ≤-asym t≤s)

_≼-total_ : ∀ s t → (s ≼ t) ⊎ (t ≼ s)
∞     ≼-total t     = inj₂ ∞
-∞    ≼-total t     = inj₁ -∞
s     ≼-total ∞     = inj₁ ∞
s     ≼-total -∞    = inj₂ -∞
fin s ≼-total fin t with s ≤-total t
... | inj₁ s≤t = inj₁ (fin s≤t)
... | inj₂ t≤s = inj₂ (fin t≤s)